---
title: "Build Your Own!"
---

## Creating a Reactive, Data-Driven App

Now that we've covered the fundamental architecture of a Shiny app, let's tackle creating an app together during this workshop. **We will work together on this app** but there a few core resources you may find useful later on or if you get ahead of the group. In particular:

- We'll use Andrews Forest data in our app so check out our description of those data in the "[Example Data](https://njlyon0.github.io/asm-2022_shiny-workshop/data.html)" tab
- If you want to learn about headers and text formatting in a Shiny app, check out the "[Labels & Headers](https://njlyon0.github.io/asm-2022_shiny-workshop/labels.html)" tab
- If you'd like to experiment with Shiny's UI built-in layout options, see the "[Layouts](https://njlyon0.github.io/asm-2022_shiny-workshop/layouts.html)" tab

In order to make sure we are all working with the same tools, be sure that you have the necessary R packages installed!

:::callout-note
#### 
```{r libraries-byo, message = F}
# install.packages("librarian")
librarian::shelf(shiny, htmltools, tidyverse, leaflet, lter/lterdatasampler)
```
:::

## Creating an Overview Tab





## Creating a Reactive Tab

Now that we've covered some components of an informative overview tab, let's turn our attention to creating a *reactive* tab! Reactivity is what makes Shiny app outputs change (reactively) as a user modifies their inputs. In short, reactivity is much of the reason for the excitement people have for learning and using R Shiny apps.

Let's begin with a user interface.

:::callout-note
####
```{r byo-reactive-ui, message = F}
reactive_ui <- fluidPage(
  
  # Dropdown for watershed
  selectInput(inputId = "dropdown_site",
              label = "Site",
              # Choices are "All" or `sitecode` values in data
              choices = c("All", unique(and_vertebrates$sitecode))),
  
  # Radio buttons for species
  radioButtons(inputId = "button_spp",
               label = "Species",
               # The `setdiff(...)` is just to remove NAs
               choices = setdiff(x = unique(and_vertebrates$species), y = NA)),
  
  # Create histogram output
  plotOutput(outputId = "hist_out")
  
)
```
:::

Create the server to take those inputs and use them to create the desired histogram.

:::callout-note
####
```{r byo-reactive-server, message = F}
reactive_server <- function(input, output){
  
  # Subset dataframe to selected species
  ## Must be done inside of "reactive consumer"
  and_v2 <- reactive({
    lterdatasampler::and_vertebrates %>%
      dplyr::filter(species == input$button_spp)
  })
  
  # Subset dataframe to desired site
  ## Also done in reactive consumer
  and_actual <- reactive({
    ## If site is "All" don't subset
    if(input$dropdown_site == "All"){ 
      and_v2()
      ## Otherwise, subset to selected site
    } else { 
      and_v2() %>%
        dplyr::filter(sitecode == input$dropdown_site) }
  })
  
  # Assemble title from inputs to be more informative
  hist_title <- reactive({
    paste0("Histogram of ", tolower(input$button_spp),
           " weight at site: ", input$dropdown_site)
  })
  
  # Create a histogram of this content
  output$hist_out <- renderPlot({
    ## Uses the reactively-created weight
    hist(x = and_actual()$weight_g,
         ## And the reactively-created title!
         main = hist_title(),
         xlab = "Weight (g)")
  })
  
}
```
:::

Generate the app from the UI and server!

:::callout-note
####
```{r byo-reactive-app, message = F}
shinyApp(ui = reactive_ui, server = reactive_server)
```
:::
